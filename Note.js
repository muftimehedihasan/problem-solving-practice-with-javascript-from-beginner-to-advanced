https://chatgpt.com/share/670528c8-5bd4-8009-a84d-71cfefe0d706

https://chatgpt.com/share/670528ed-e794-800f-81d0-22e7a483265f


// অ্যালগরিদম ও ডেটা স্ট্রাকচারের সংক্ষিপ্ত পরিচয়
// ===========================================

// অ্যালগরিদম (Algorithm):
// অ্যালগরিদম হলো একটি সুনির্দিষ্ট ধাপসমূহের সেট যা কোনো নির্দিষ্ট সমস্যার সমাধান করতে ব্যবহৃত হয়। এটি সাধারণত ধাপে ধাপে কাজের একটি পরিকল্পনা যা নির্দিষ্ট ইনপুট থেকে আউটপুটের দিকে নিয়ে যায়।

// ডেটা স্ট্রাকচার (Data Structure):
// ডেটা স্ট্রাকচার হলো ডেটা সংগঠিত করার একটি উপায় যাতে ডেটা অ্যাক্সেস করা এবং পরিচালনা করা সহজ হয়। বিভিন্ন ডেটা স্ট্রাকচারের উদাহরণ হলো: অ্যারে, লিঙ্কড লিস্ট, স্ট্যাক, কিউ, ট্রি, গ্রাফ ইত্যাদি।

// ৩০টি অ্যালগরিদম ও ডেটা স্ট্রাকচার কোড চ্যালেঞ্জ (ধাপে ধাপে)
// প্রথমিক স্তর থেকে মাধ্যমিক স্তরে ধীরে ধীরে এগিয়ে নেওয়ার জন্য নিচের চ্যালেঞ্জগুলো দেয়া হলো:

// ১-১০: প্রাথমিক স্তর (Basic Level)
// 1. ফিবোনাচি সিরিজ তৈরি করুন
// একটি ফাংশন লিখুন যা n সংখ্যক ফিবোনাচি সংখ্যা আউটপুট করবে।
// ডেটা স্ট্রাকচার: রিকার্শন

// 2. পালিন্ড্রোম চেক করুন
// একটি ফাংশন লিখুন যা কোনো স্ট্রিং পালিন্ড্রোম কিনা তা নির্ণয় করবে।
// ডেটা স্ট্রাকচার: স্ট্রিং

// 3. বাবল সর্ট ইমপ্লিমেন্ট করুন
// বাবল সর্ট অ্যালগরিদম দিয়ে একটি অ্যারে সর্ট করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// 4. দ্বৈত অনুসন্ধান (Binary Search)
// একটি সর্টেড অ্যারেতে দ্বৈত অনুসন্ধান অ্যালগরিদম ব্যবহার করে একটি সংখ্যা খুঁজুন।
// ডেটা স্ট্রাকচার: অ্যারে

// 5. ফ্যাক্টোরিয়াল গণনা করুন
// একটি ফাংশন লিখুন যা রিকার্শন ব্যবহার করে একটি সংখ্যার ফ্যাক্টোরিয়াল নির্ণয় করবে।
// ডেটা স্ট্রাকচার: রিকার্শন

// 6. অ্যানাগ্রাম চেক করুন
// দুটি স্ট্রিং কি অ্যানাগ্রাম কিনা তা নির্ণয় করার জন্য একটি ফাংশন লিখুন।
// ডেটা স্ট্রাকচার: স্ট্রিং

// 7. স্ট্যাক ব্যবহার করে ব্যালান্সড ব্র্যাকেট চেক করুন
// একটি স্ট্রিং-এ কি ব্র্যাকেটগুলি ব্যালান্সড আছে তা যাচাই করুন।
// ডেটা স্ট্রাকচার: স্ট্যাক

// 8. লিনিয়ার সার্চ ইমপ্লিমেন্ট করুন
// একটি অ্যারেতে কোনো নির্দিষ্ট উপাদান খুঁজে পেতে লিনিয়ার সার্চ অ্যালগরিদম তৈরি করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// 9. রিভার্স স্ট্রিং
// একটি ফাংশন লিখুন যা একটি স্ট্রিং উল্টো করে দিবে।
// ডেটা স্ট্রাকচার: স্ট্রিং

// 10. ডুপ্লিকেট এলিমেন্ট খুঁজে বের করুন
// একটি অ্যারেতে কোনো ডুপ্লিকেট সংখ্যা আছে কিনা তা খুঁজে বের করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// ১১-২০: মধ্যবর্তী স্তর (Intermediate Level)

// 11. ইনসারশন সর্ট ইমপ্লিমেন্ট করুন
// ইনসারশন সর্ট অ্যালগরিদম দিয়ে একটি অ্যারে সর্ট করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// 12. ডেপথ ফার্স্ট সার্চ (DFS) ইমপ্লিমেন্ট করুন
// একটি গ্রাফে ডেপথ ফার্স্ট সার্চ ইমপ্লিমেন্ট করুন।
// ডেটা স্ট্রাকচার: গ্রাফ

// 13. ম্যাক্স হিপ ইমপ্লিমেন্ট করুন
// একটি হিপ ডেটা স্ট্রাকচার তৈরি করুন এবং ম্যাক্স হিপ ইমপ্লিমেন্ট করুন।
// ডেটা স্ট্রাকচার: হিপ

// 14. মার্জ সর্ট ইমপ্লিমেন্ট করুন
// মার্জ সর্ট অ্যালগরিদম ইমপ্লিমেন্ট করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// 15. রিভার্স লিঙ্কড লিস্ট
// একটি সিঙ্গলি লিঙ্কড লিস্ট উল্টো করুন।
// ডেটা স্ট্রাকচার: লিঙ্কড লিস্ট

// 16. ব্রেডথ ফার্স্ট সার্চ (BFS) ইমপ্লিমেন্ট করুন
// একটি গ্রাফে ব্রেডথ ফার্স্ট সার্চ ইমপ্লিমেন্ট করুন।
// ডেটা স্ট্রাকচার: গ্রাফ

// 17. স্ট্যাক ব্যবহার করে ইনফিক্স থেকে পোস্টফিক্স কনভার্সন
// একটি ইনফিক্স এক্সপ্রেশনকে পোস্টফিক্স এক্সপ্রেশনে রূপান্তর করুন।
// ডেটা স্ট্রাকচার: স্ট্যাক

// 18. কুইক সর্ট ইমপ্লিমেন্ট করুন
// কুইক সর্ট অ্যালগরিদম দিয়ে একটি অ্যারে সর্ট করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// 19. ব্যালেন্সড বাইনারি সার্চ ট্রি (BST) তৈরি করুন
// একটি ব্যালেন্সড BST তৈরি করুন এবং একটি উপাদান খুঁজুন।
// ডেটা স্ট্রাকচার: ট্রি

// 20. রোটেট অ্যারে
// একটি অ্যারেকে নির্দিষ্ট পরিমাণে ডানে বা বামে ঘোরান।
// ডেটা স্ট্রাকচার: অ্যারে

// ২১-৩০: উচ্চ স্তর (Advanced Level)

// 21. ডাইকসট্রার অ্যালগরিদম ইমপ্লিমেন্ট করুন
// একটি গ্রাফের মধ্যে সবচেয়ে কম খরচের পথ খুঁজতে ডাইকসট্রার অ্যালগরিদম ইমপ্লিমেন্ট করুন।
// ডেটা স্ট্রাকচার: গ্রাফ

//22. ট্রাই ডেটা স্ট্রাকচার ইমপ্লিমেন্ট করুন
// একটি ট্রাই ডেটা স্ট্রাকচার তৈরি করুন এবং শব্দের খোঁজ করুন।
// ডেটা স্ট্রাকচার: ট্রাই

// 23. এভিএল ট্রি ইমপ্লিমেন্ট করুন
// একটি অ্যাভিএল ট্রি তৈরি করুন যা স্বয়ংক্রিয়ভাবে ব্যালেন্স থাকবে।
// ডেটা স্ট্রাকচার: ট্রি

// 24. হ্যাশ টেবিল ইমপ্লিমেন্ট করুন
// একটি হ্যাশ টেবিল তৈরি করুন এবং সংঘর্ষ (collision) মোকাবেলা করুন।
// ডেটা স্ট্রাকচার: হ্যাশ টেবিল

// 25. টপোলজিকাল সর্ট ইমপ্লিমেন্ট করুন
// একটি ডাইরেক্টেড অ্যাসাইক্লিক গ্রাফে টপোলজিকাল সর্ট প্রয়োগ করুন।
// ডেটা স্ট্রাকচার: গ্রাফ

// 26. কেএমপি (KMP) অ্যালগরিদম ইমপ্লিমেন্ট করুন
// একটি স্ট্রিং-এ একটি প্যাটার্ন খুঁজতে কেএমপি অ্যালগরিদম ব্যবহার করুন।
// ডেটা স্ট্রাকচার: স্ট্রিং

// 27. লংগেস্ট কমন সাবসিকোয়েন্স (LCS)
// দুটি স্ট্রিং-এর মধ্যে সবচেয়ে দীর্ঘ সাধারণ সাবসিকোয়েন্স খুঁজুন।
// ডেটা স্ট্রাকচার: ডাইনামিক প্রোগ্রামিং

// 28. গ্রাফ সাইকেল ডিটেকশন
// একটি গ্রাফে কোনো সাইকেল আছে কিনা তা যাচাই করুন।
// ডেটা স্ট্রাকচার: গ্রাফ

// 29. ফ্লয়েড-ওয়ারশাল অ্যালগরিদম
// সমস্ত জোড়ার মধ্যে সবচেয়ে ছোট পথ খুঁজতে ফ্লয়েড-ওয়ারশাল অ্যালগরিদম ইমপ্লিমেন্ট করুন।
// ডেটা স্ট্রাকচার: গ্রাফ

// 30. র্যাডিক্স সর্ট ইমপ্লিমেন্ট করুন
// র্যাডিক্স সর্ট অ্যালগরিদম ব্যবহার করে একটি অ্যারে সর্ট করুন।
// ডেটা স্ট্রাকচার: অ্যারে

// অ্যালগরিদম ও ডেটা স্ট্রাকচারের কিছু প্রসিদ্ধ উদাহরণ এবং তাদের সংক্ষিপ্ত পরিচয়সহ জাভাস্ক্রিপ্ট কোডের মাধ্যমে ব্যাখ্যা দেওয়া হলো। যেহেতু আপনি প্রাথমিক পর্যায়ে আছেন, প্রতিটি উদাহরণ সহজভাবে তুলে ধরছি।

// ১. লিনিয়ার সার্চ (Linear Search)
// এটি একটি সাধারণ অনুসন্ধান অ্যালগরিদম, যেখানে একটি অ্যারের প্রতিটি উপাদান চেক করা হয় যতক্ষণ না খুঁজে পাওয়া যায়।

// function linearSearch(arr, target) {
//     for (let i = 0; i < arr.length; i++) {
//       if (arr[i] === target) {
//         return i;  // উপাদানের ইনডেক্স রিটার্ন করে
//       }
//     }
//     return -1;  // যদি না পাওয়া যায়
//   }
  
//   let numbers = [10, 25, 30, 40, 55];
//   console.log(linearSearch(numbers, 30));  // আউটপুট: 2
  
// ২. বাইনারি সার্চ (Binary Search)
// বাইনারি সার্চ একটি অ্যালগরিদম যা শুধুমাত্র সর্টেড অ্যারের উপর কাজ করে। এটি প্রতিবার অ্যারেকে অর্ধেক করে এবং খোঁজ চালায়।

// function binarySearch(arr, target) {
//     let left = 0;
//     let right = arr.length - 1;
  
//     while (left <= right) {
//       let mid = Math.floor((left + right) / 2);
      
//       if (arr[mid] === target) {
//         return mid;
//       } else if (arr[mid] < target) {
//         left = mid + 1;
//       } else {
//         right = mid - 1;
//       }
//     }
//     return -1;  // না পাওয়া গেলে
//   }
  
//   let sortedNumbers = [10, 20, 30, 40, 50];
//   console.log(binarySearch(sortedNumbers, 30));  // আউটপুট: 2
  

// ৩. বাবল সর্ট (Bubble Sort)

// এটি একটি সর্টিং অ্যালগরিদম যা প্রতিটি সংখ্যাকে পাশের সংখ্যার সাথে তুলনা করে এবং প্রয়োজনে তাদের স্থান অদলবদল করে।

// function bubbleSort(arr) {
//     let len = arr.length;
//     for (let i = 0; i < len; i++) {
//       for (let j = 0; j < len - 1 - i; j++) {
//         if (arr[j] > arr[j + 1]) {
//           [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];  // অদলবদল
//         }
//       }
//     }
//     return arr;
//   }
  
//   let unsortedArray = [29, 10, 14, 37, 14];
//   console.log(bubbleSort(unsortedArray));  // আউটপুট: [10, 14, 14, 29, 37]
  
// ৪. স্ট্যাক (Stack)
// স্ট্যাক হলো একটি লাস্ট ইন ফার্স্ট আউট (LIFO) ডেটা স্ট্রাকচার, যেখানে শেষ উপাদানটি প্রথমে বের হয়।

// class Stack {
//     constructor() {
//       this.items = [];
//     }
  
//     push(element) {
//       this.items.push(element);  // উপাদান যোগ করা
//     }
  
//     pop() {
//       return this.items.pop();  // উপাদান সরানো
//     }
  
//     peek() {
//       return this.items[this.items.length - 1];  // উপরের উপাদান দেখানো
//     }
  
//     isEmpty() {
//       return this.items.length === 0;  // খালি কিনা চেক
//     }
//   }
  
//   let stack = new Stack();
//   stack.push(5);
//   stack.push(10);
//   console.log(stack.pop());  // আউটপুট: 10
  
// ৫. কিউ (Queue)
// কিউ হলো একটি ফার্স্ট ইন ফার্স্ট আউট (FIFO) ডেটা স্ট্রাকচার, যেখানে প্রথমে যোগ করা উপাদানটি প্রথমে বের হয়।
// class Queue {
//     constructor() {
//       this.items = [];
//     }
  
//     enqueue(element) {
//       this.items.push(element);  // উপাদান যোগ করা
//     }
  
//     dequeue() {
//       return this.items.shift();  // প্রথম উপাদান সরানো
//     }
  
//     front() {
//       return this.items[0];  // প্রথম উপাদান দেখা
//     }
  
//     isEmpty() {
//       return this.items.length === 0;  // খালি কিনা চেক
//     }
//   }
  
//   let queue = new Queue();
//   queue.enqueue(5);
//   queue.enqueue(10);
//   console.log(queue.dequeue());  // আউটপুট: 5
  
// ৬. লিঙ্কড লিস্ট (Linked List)
// লিঙ্কড লিস্ট হলো একটি ডেটা স্ট্রাকচার যেখানে প্রতিটি উপাদান একটি নোড হিসেবে থাকে এবং প্রতিটি নোডের সাথে পরবর্তী নোডের লিঙ্ক থাকে।
// class Node {
//     constructor(data) {
//       this.data = data;
//       this.next = null;
//     }
//   }
  
//   class LinkedList {
//     constructor() {
//       this.head = null;
//     }
  
//     append(data) {
//       let newNode = new Node(data);
//       if (this.head === null) {
//         this.head = newNode;
//       } else {
//         let current = this.head;
//         while (current.next) {
//           current = current.next;
//         }
//         current.next = newNode;
//       }
//     }
  
//     printList() {
//       let current = this.head;
//       while (current) {
//         console.log(current.data);
//         current = current.next;
//       }
//     }
//   }
  
//   let list = new LinkedList();
//   list.append(1);
//   list.append(2);
//   list.append(3);
//   list.printList();  // আউটপুট: 1 2 3

// ৭. বাইনারি সার্চ ট্রি (Binary Search Tree)
// একটি ট্রি ডেটা স্ট্রাকচার যেখানে প্রতিটি নোডের বাম সন্তান ছোট এবং ডান সন্তান বড়।

// class Node {
//     constructor(data) {
//       this.data = data;
//       this.left = null;
//       this.right = null;
//     }
//   }
  
//   class BinarySearchTree {
//     constructor() {
//       this.root = null;
//     }
  
//     insert(data) {
//       const newNode = new Node(data);
//       if (this.root === null) {
//         this.root = newNode;
//       } else {
//         this.insertNode(this.root, newNode);
//       }
//     }
  
//     insertNode(node, newNode) {
//       if (newNode.data < node.data) {
//         if (node.left === null) {
//           node.left = newNode;
//         } else {
//           this.insertNode(node.left, newNode);
//         }
//       } else {
//         if (node.right === null) {
//           node.right = newNode;
//         } else {
//           this.insertNode(node.right, newNode);
//         }
//       }
//     }
  
//     inorder(node = this.root) {
//       if (node !== null) {
//         this.inorder(node.left);
//         console.log(node.data);
//         this.inorder(node.right);
//       }
//     }
//   }
  
//   let bst = new BinarySearchTree();
//   bst.insert(15);
//   bst.insert(25);
//   bst.insert(10);
//   bst.inorder();  // আউটপুট: 10 15 25
  
// এই উদাহরণগুলো অ্যালগরিদম ও ডেটা স্ট্রাকচারের মৌলিক ধারণা গঠনে সাহায্য করবে। এভাবেই আপনি ধীরে ধীরে আরো জটিল ধারণাগুলো আয়ত্ত করতে পারবেন।